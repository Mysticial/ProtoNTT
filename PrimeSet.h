/* PrimeSet.h
 * 
 * Author           : Alexander J. Yee
 * Date Created     : 11/01/2014
 * Last Modified    : 11/02/2014
 * 
 *      Factors do not need to be prime, but the only known usable factors are
 *      indeed prime. If composite factors are used, they must have no prime
 *      factors in common.
 * 
 * 
 *      m       =   Multiplier
 *      k       =   Maximum transform length (m * 2^k)
 *      factor  =   The modulus to be used (usually prime)
 * 
 *      root_f  =   Primitive Root:
 *                      root_f^(m * 2^ k     )  mod factor  =  1
 *                      root_f^(m * 2^(k - 1))  mod factor  =  -1
 * 
 *      scaler  =   Scaling factor:
 *                      scaler = (2m)^(-1) mod factor
 * 
 *      E       =   CRT construction coefficients
 *      P       =   Product of all the factors (little-endian base 2^64)
 *      R       =   2^(64*factors) / P
 * 
 */

#pragma once
#ifndef _ntt_PrimeSet_H
#define _ntt_PrimeSet_H
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#include <stdint.h>
namespace ProtoNTT{
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
struct PrimeSet{
    char factors;
    char m;
    char max_k;
    const uint64_t* factor;
    const uint64_t* root_f;
    const uint64_t* scaler;
    const uint64_t* E;
    const uint64_t* P;
    double R;
};
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
}
#endif
